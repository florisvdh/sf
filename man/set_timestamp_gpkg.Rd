% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/manipulate_gpkg.R
\name{set_timestamp_gpkg}
\alias{set_timestamp_gpkg}
\title{Set explicit timestamp in a GeoPackage 'gpkg_contents' table}
\usage{
set_timestamp_gpkg(dsn, timestamp = Sys.time(), verbose = TRUE)
}
\arguments{
\item{dsn}{the path to the GeoPackage file (*.gpkg)}

\item{timestamp}{a \code{Date} or \code{POSIXct} object, used to generate
the timestamp.
For a \code{Date} object, time will be considered as 00:00:00 local time.
Defaults to system time, however must be set explicitly for reproducible
workflows.}

\item{verbose}{Logical.
Prints a message with the number of affected rows in \code{gpkg_contents}.}
}
\value{
\code{NULL} is returned invisibly.
}
\description{
Overwrites all timestamps (column \code{last_change}) of the
\code{gpkg_contents} table in an existing GeoPackage file.
As such the function assists in making a binary-reproducible GeoPackage file.
}
\details{
Internally the timestamp is converted to a specific ISO 8601 format
that is required by the GeoPackage standard.
}
\examples{
library(openssl)
md5sum <- function(x) paste(md5(file(x)))

# Using existing geopackage with vector layer:
filepath <- system.file("gpkg/b_pump.gpkg", package = "sf")
(md5_original <- md5sum(filepath))

sf_layer <- read_sf(system.file("gpkg/b_pump.gpkg", package = "sf"))

# A rewrite changes the checksum:
filepath_notimeset <- file.path(tempdir(), "b_pump_notimeset.gpkg")
  # write 1:
st_write(sf_layer, dsn = filepath_notimeset)
(md5_notimeset1 <- md5sum(filepath_notimeset))
  # write 2:
st_write(sf_layer, dsn = filepath_notimeset, delete_dsn = TRUE)
(md5_notimeset2 <- md5sum(filepath_notimeset))
  # compare:
md5_notimeset1 == md5_notimeset2

# Setting a fixed date/time
(fixed_date <- as.POSIXct("2020-12-25"))
(fixed_time <- as.POSIXct("2020-12-25 12:00:00", tz = "CET"))

filepath_timeset <- file.path(tempdir(), "b_pump_timeset.gpkg")
  # write 1 (date):
st_write(sf_layer, dsn = filepath_timeset)
set_timestamp_gpkg(filepath_timeset, fixed_date)
md5_timeset1 <- md5sum(filepath_timeset)
  # write 2 (date):
st_write(sf_layer, dsn = filepath_timeset, delete_dsn = TRUE)
set_timestamp_gpkg(filepath_timeset, fixed_date)
md5_timeset2 <- md5sum(filepath_timeset)
  # write 3 (time):
st_write(sf_layer, dsn = filepath_timeset, delete_dsn = TRUE)
set_timestamp_gpkg(filepath_timeset, fixed_time)
md5_timeset3 <- md5sum(filepath_timeset)
  # write 4 (time):
st_write(sf_layer, dsn = filepath_timeset, delete_dsn = TRUE)
set_timestamp_gpkg(filepath_timeset, fixed_time)
md5_timeset4 <- md5sum(filepath_timeset)
  # compare:
all.equal(md5_timeset1, md5_timeset2, md5_timeset3, md5_timeset4)

# Also works for GPKG with GDAL raster driver (accessed with stars):
library(stars)
library(dplyr)

filepath_stars <- file.path(tempdir(), "stars_2d.gpkg")

stars_2d <-
	system.file("tif/L7_ETMs.tif", package = "stars") \%>\%
	read_stars() \%>\%
	slice(band, 1)
  # write 1:
stars_2d \%>\%
	write_stars(filepath_stars, driver = "GPKG")
set_timestamp_gpkg(filepath_stars, fixed_time)
md5_stars1 <- md5sum(filepath_stars)
  # write 2:
stars_2d \%>\%
	write_stars(filepath_stars, driver = "GPKG")
set_timestamp_gpkg(filepath_stars, fixed_time)
md5_stars2 <- md5sum(filepath_stars)
  # compare:
all.equal(md5_stars1, md5_stars2)

}
\author{
Floris Vanderhaeghe, \url{https://github.com/florisvdh}
}
